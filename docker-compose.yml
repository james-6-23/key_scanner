version: '3.8'

services:
  # WARP代理服务
  warp:
    image: caomingjun/warp:latest
    container_name: warp-proxy
    restart: unless-stopped
    
    # 系统权限配置
    cap_add:
      - NET_ADMIN
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=0
      - net.ipv4.conf.all.src_valid_mark=1
    
    # 端口配置
    # 如果需要在宿主机上使用代理，取消下面的注释
    # ports:
    #   - "127.0.0.1:1080:1080"
    
    # 容器内部网络暴露
    expose:
      - "1080"
    
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M
    
    # 网络配置
    networks:
      - scanner-network
    
    # 健康检查
    healthcheck:
      test: ["CMD", "curl", "-x", "socks5://127.0.0.1:1080", "https://www.cloudflare.com/cdn-cgi/trace"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis缓存服务（凭证管理系统需要）
  redis:
    image: redis:7-alpine
    container_name: scanner-redis
    restart: unless-stopped
    
    # 端口配置
    expose:
      - "6379"
    
    # 数据持久化
    volumes:
      - redis-data:/data
    
    # Redis配置
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    
    # 网络配置
    networks:
      - scanner-network
    
    # 健康检查
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # 主应用服务 - 超级版扫描器
  scanner:
    build:
      context: .
      dockerfile: Dockerfile
    image: key-scanner-super:latest
    container_name: key-scanner-super
    restart: unless-stopped
    
    # 依赖服务
    depends_on:
      warp:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    # 环境变量
    env_file:
      - .env
    environment:
      # 代理配置
      PROXY: ${PROXY:-http://warp:1080}
      PYTHONUNBUFFERED: 1
      TZ: Asia/Shanghai
      
      # 性能优化
      HAJIMI_MAX_WORKERS: 10
      HAJIMI_BATCH_SIZE: 10
      HAJIMI_BATCH_INTERVAL: 60
      
      # 路径配置
      QUERIES_FILE: /app/queries.txt
      DATA_PATH: /app/data
      CONFIG_PATH: /app/config
      CREDENTIAL_MANAGER_PATH: /app/credential_manager
      
      # Token文件配置
      USE_EXTERNAL_TOKEN_FILE: true
      GITHUB_TOKENS_FILE: /app/github_tokens.txt
      
      # 凭证管理配置
      USE_CREDENTIAL_MANAGER: true
      CREDENTIAL_AUTO_HARVEST: ${CREDENTIAL_AUTO_HARVEST:-false}
      CREDENTIAL_STORAGE_TYPE: ${CREDENTIAL_STORAGE_TYPE:-redis}
      REDIS_URL: redis://redis:6379/0
      
      # API配置
      DEFAULT_API_TYPE: ${DEFAULT_API_TYPE:-gemini}
      SCAN_API_TYPES: ${SCAN_API_TYPES:-gemini}
      
      # 负载均衡策略
      LOAD_BALANCE_STRATEGY: ${LOAD_BALANCE_STRATEGY:-adaptive}
      
      # 监控配置
      ENABLE_MONITORING: ${ENABLE_MONITORING:-true}
      MONITORING_INTERVAL: ${MONITORING_INTERVAL:-300}
    
    # 数据卷挂载
    volumes:
      # 查询文件（支持单个或目录）
      - ./queries.txt:/app/queries.txt:ro
      - ./config/queries:/app/config/queries:ro
      
      # API配置文件
      - ./config/api_patterns.json:/app/config/api_patterns.json:ro
      
      # GitHub tokens文件
      - ./github_tokens.txt:/app/github_tokens.txt:ro
      
      # 环境变量文件
      - ./.env:/app/.env:ro
      
      # 数据持久化
      - scanner-data:/app/data
      
      # 凭证存储
      - credential-data:/app/credential_manager/storage
      
      # 日志持久化
      - ./logs:/app/data/logs:rw
      
      # 监控数据
      - ./monitoring:/app/data/monitoring:rw
    
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    # 日志配置
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
        labels: "service=key-scanner-super"
    
    # 网络配置
    networks:
      - scanner-network
    
    # 健康检查
    healthcheck:
      test: ["CMD", "python", "-c", "import os; exit(0 if os.path.exists('/app/data') else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # 交互式终端（用于启动器菜单）
    stdin_open: true
    tty: true

  # 监控面板服务（可选）
  monitor:
    build:
      context: .
      dockerfile: Dockerfile
    image: key-scanner-super:latest
    container_name: scanner-monitor
    restart: unless-stopped
    
    # 依赖服务
    depends_on:
      - redis
    
    # 运行监控面板
    command: ["python", "credential_manager/monitoring/dashboard.py"]
    
    # 环境变量
    environment:
      REDIS_URL: redis://redis:6379/0
      TZ: Asia/Shanghai
      PYTHONUNBUFFERED: 1
    
    # 端口映射（监控面板Web界面）
    ports:
      - "8080:8080"
    
    # 数据卷
    volumes:
      - ./monitoring:/app/data/monitoring:rw
      - credential-data:/app/credential_manager/storage:ro
    
    # 网络配置
    networks:
      - scanner-network
    
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M

# 网络定义
networks:
  scanner-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16

# 数据卷定义
volumes:
  scanner-data:
    driver: local
  redis-data:
    driver: local
  credential-data:
    driver: local