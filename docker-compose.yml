version: '3.8'

services:
  # WARP代理服务
  warp:
    image: caomingjun/warp:latest
    container_name: warp-proxy
    restart: unless-stopped
    
    # 系统权限配置
    cap_add:
      - NET_ADMIN
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=0
      - net.ipv4.conf.all.src_valid_mark=1
    
    # 端口配置
    # 如果需要在宿主机上使用代理，取消下面的注释
    # ports:
    #   - "127.0.0.1:1080:1080"
    
    # 容器内部网络暴露
    expose:
      - "1080"
    
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M
    
    # 网络配置
    networks:
      - scanner-network
    
    # 健康检查
    healthcheck:
      test: ["CMD", "curl", "-x", "socks5://127.0.0.1:1080", "https://www.cloudflare.com/cdn-cgi/trace"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 主应用服务
  scanner:
    build:
      context: .
      dockerfile: Dockerfile
    image: key-scanner:latest
    container_name: key-scanner
    restart: unless-stopped
    
    # 依赖WARP代理服务
    depends_on:
      warp:
        condition: service_healthy
    
    # 环境变量
    env_file:
      - .env
    environment:
      # 代理配置
      # 容器内部使用: http://warp:1080
      # 宿主机使用: http://127.0.0.1:1080 (需要开启ports映射)
      - PROXY=${PROXY:-http://warp:1080}
      - PYTHONUNBUFFERED=1
      - TZ=Asia/Shanghai
      # 性能优化
      - HAJIMI_MAX_WORKERS=10
      - HAJIMI_BATCH_SIZE=10
      - HAJIMI_BATCH_INTERVAL=60
      # 指定queries文件路径
      - QUERIES_FILE=/app/queries.txt
      - DATA_PATH=/app/data
    
    # 数据卷挂载
    volumes:
      # 挂载本地queries.txt到容器根目录
      - ./queries.txt:/app/queries.txt:ro
      # 挂载环境变量文件
      - ./.env:/app/.env:ro
      # 数据持久化
      - scanner-data:/app/data
      # 日志持久化
      - ./logs:/app/data/logs:rw
    
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    # 日志配置
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=key-scanner"
    
    # 网络配置
    networks:
      - scanner-network
    
    # 健康检查
    healthcheck:
      test: ["CMD", "pgrep", "-f", "api_key_scanner"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

# 网络定义
networks:
  scanner-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 数据卷定义
volumes:
  scanner-data:
    driver: local