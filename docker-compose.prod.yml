version: '3.8'

services:
  hajimi-king:
    image: ghcr.io/james-6-23/hajimi-king:${VERSION:-latest}
    container_name: hajimi-king-${INSTANCE:-1}
    restart: always
    
    # 生产环境资源配置
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 1G
      # 滚动更新配置
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 30s
        max_failure_ratio: 0.3
    
    # 环境变量
    env_file:
      - .env.prod
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      # 性能优化
      - HAJIMI_MAX_WORKERS=20
      - HAJIMI_BATCH_SIZE=20
      - HAJIMI_BATCH_INTERVAL=30
      # 代理配置
      - PROXY=${PROXY_LIST}
      # 监控
      - ENABLE_METRICS=true
      - METRICS_PORT=9090
    
    # 持久化存储
    volumes:
      - hajimi-data:/app/data:rw
      - hajimi-logs:/app/logs:rw
      - ./queries.txt:/app/data/queries.txt:ro
      - /etc/localtime:/etc/localtime:ro
    
    # 生产环境日志
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "10"
        labels: "service=hajimi-king,env=production"
        tag: "hajimi-king/{{.Name}}/{{.ID}}"
    
    # 网络
    networks:
      - hajimi-prod-network
      - monitoring-network
    
    # 安全加固
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100M
    
    # 健康检查（生产环境更严格）
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9090/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 60s
    
    # 标签
    labels:
      - "com.hajimi.env=production"
      - "com.hajimi.version=${VERSION:-latest}"
      - "traefik.enable=true"
      - "traefik.http.routers.hajimi-metrics.rule=Host(`metrics.hajimi.local`)"
      - "traefik.http.services.hajimi-metrics.loadbalancer.server.port=9090"

  # 监控 - Prometheus Node Exporter
  node-exporter:
    image: prom/node-exporter:latest
    container_name: hajimi-node-exporter
    restart: always
    networks:
      - monitoring-network
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    profiles:
      - monitoring

  # 负载均衡器
  traefik:
    image: traefik:v2.10
    container_name: hajimi-traefik
    restart: always
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-certs:/letsencrypt
      - ./traefik.yml:/etc/traefik/traefik.yml:ro
    networks:
      - hajimi-prod-network
      - monitoring-network
    profiles:
      - loadbalancer

# 网络定义
networks:
  hajimi-prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
  
  monitoring-network:
    external: true
    name: monitoring

# 持久化卷
volumes:
  hajimi-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/hajimi/data
  
  hajimi-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/hajimi/logs
  
  traefik-certs:
    driver: local