# ============================================
# Docker部署环境配置
# ============================================
# 复制此文件为 .env 并根据你的需求修改

# ============================================
# 必需配置
# ============================================
# GitHub API 令牌配置
# 模式1：小规模部署（逗号分隔）
GITHUB_TOKENS=ghp_your_token_here_1,ghp_your_token_here_2

# 模式2：大规模部署（使用外部文件）
# USE_EXTERNAL_TOKEN_FILE=true
# GITHUB_TOKENS_FILE=github_tokens.txt

# Token生命周期管理
TOKEN_AUTO_REMOVE_EXHAUSTED=true
TOKEN_MIN_REMAINING_CALLS=10
TOKEN_ARCHIVE_DIR=/app/data/archived_tokens

# ============================================
# 代理配置（Docker内部自动配置）
# ============================================
# 容器内部会自动使用 warp:1080
# 无需手动修改此项
PROXY=http://warp:1080

# ============================================
# 搜索配置
# ============================================
# 查询文件路径（从根目录读取）
QUERIES_FILE=/app/queries.txt

# 仓库年龄过滤（天数）
DATE_RANGE_DAYS=730

# 文件路径黑名单
FILE_PATH_BLACKLIST=readme,docs,doc/,.md,example,sample,tutorial,test,spec,demo,mock

# Gemini验证模型
HAJIMI_CHECK_MODEL=gemini-2.0-flash-exp

# ============================================
# 性能配置
# ============================================
# 最大并行验证工作线程数
HAJIMI_MAX_WORKERS=10

# 批处理大小
HAJIMI_BATCH_SIZE=10

# 批处理间隔（秒）
HAJIMI_BATCH_INTERVAL=60

# ============================================
# 数据存储
# ============================================
# 数据目录（容器内路径）
DATA_PATH=/app/data

# ============================================
# 外部同步（可选）
# ============================================
# Gemini Balancer同步
GEMINI_BALANCER_SYNC_ENABLED=false
GEMINI_BALANCER_URL=
GEMINI_BALANCER_AUTH=

# GPT Load同步
GPT_LOAD_SYNC_ENABLED=false
GPT_LOAD_URL=
GPT_LOAD_AUTH=
GPT_LOAD_GROUP_NAME=

# ============================================
# Docker特定配置
# ============================================
# 时区设置
TZ=Asia/Shanghai

# 日志级别
LOG_LEVEL=INFO

# Python输出不缓冲
PYTHONUNBUFFERED=1

# ============================================
# 快速启动说明
# ============================================
# 1. 复制此文件为 .env
#    cp .env.docker .env
#
# 2. 编辑 .env 文件，添加你的GitHub Token
#    nano .env
#
# 3. 准备 queries.txt 文件
#    cp queries.example queries.txt
#
# 4. 启动服务
#    docker-compose up -d
#
# 5. 查看日志
#    docker-compose logs -f
# ============================================