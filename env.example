# ============================================
# Key Scanner - Environment Configuration Example
# ============================================
# Copy this file to .env and update with your values
# 复制此文件为 .env 并更新为你的配置值

# ============================================
# REQUIRED CONFIGURATION / 必需配置
# ============================================

# ============================================
# TOKEN CONFIGURATION / TOKEN配置
# ============================================

# Option 1: Small-scale deployment (comma-separated tokens in .env)
# 选项1：小规模部署（在.env中使用逗号分隔的tokens）
# GitHub API tokens (comma-separated for rotation)
# GitHub API 令牌（逗号分隔，用于轮换）
# Get tokens at: https://github.com/settings/tokens
GITHUB_TOKENS=ghp_your_token_here_1,ghp_your_token_here_2,ghp_your_token_here_3

# Option 2: Large-scale deployment (external file with line-separated tokens)
# 选项2：大规模部署（使用外部文件，每行一个token）
# Set to true to enable external token file mode
# 设置为true启用外部token文件模式
USE_EXTERNAL_TOKEN_FILE=false

# Path to external token file (when USE_EXTERNAL_TOKEN_FILE=true)
# 外部token文件路径（当USE_EXTERNAL_TOKEN_FILE=true时）
GITHUB_TOKENS_FILE=github_tokens.txt

# ============================================
# TOKEN MANAGEMENT / TOKEN管理
# ============================================

# Automatically remove exhausted tokens
# 自动移除耗尽的tokens
TOKEN_AUTO_REMOVE_EXHAUSTED=true

# Minimum remaining API calls before token is considered exhausted
# token被认为耗尽前的最小剩余API调用次数
TOKEN_MIN_REMAINING_CALLS=10

# Directory for archiving removed/invalid tokens
# 归档已移除/无效tokens的目录
TOKEN_ARCHIVE_DIR=./data/archived_tokens

# ============================================
# SEARCH CONFIGURATION / 搜索配置
# ============================================

# Search queries file path (relative to DATA_PATH)
# 搜索查询文件路径（相对于 DATA_PATH）
QUERIES_FILE=queries.txt

# Repository age filter in days (only scan repos updated within this period)
# 仓库年龄过滤器（天数）- 只扫描在此期间内更新的仓库
DATE_RANGE_DAYS=730

# File path blacklist (comma-separated, case-insensitive)
# 文件路径黑名单（逗号分隔，不区分大小写）
FILE_PATH_BLACKLIST=readme,docs,doc/,.md,example,sample,tutorial,test,spec,demo,mock

# Model used for key validation
# 用于密钥验证的模型
HAJIMI_CHECK_MODEL=gemini-2.5-flash

# ============================================
# PERFORMANCE CONFIGURATION / 性能配置
# ============================================

# Maximum parallel validation workers
# 最大并行验证工作线程数
HAJIMI_MAX_WORKERS=10

# Batch processing size
# 批处理大小
HAJIMI_BATCH_SIZE=10

# Batch processing interval in seconds
# 批处理间隔（秒）
HAJIMI_BATCH_INTERVAL=60

# ============================================
# NETWORK CONFIGURATION / 网络配置
# ============================================

# Proxy servers (comma-separated, supports authentication)
# 代理服务器（逗号分隔，支持认证）
# Format: http://user:pass@host:port or http://host:port
# 格式：http://user:pass@host:port 或 http://host:port
PROXY=

# Request timeout in seconds
# 请求超时时间（秒）
REQUEST_TIMEOUT=30

# Retry attempts for failed requests
# 失败请求的重试次数
MAX_RETRIES=3

# ============================================
# DATA STORAGE CONFIGURATION / 数据存储配置
# ============================================

# Data directory path (absolute or relative)
# 数据目录路径（绝对或相对路径）
DATA_PATH=./data

# File name prefixes
# 文件名前缀
VALID_KEY_PREFIX=keys/keys_valid_
RATE_LIMITED_KEY_PREFIX=keys/key_429_
KEYS_SEND_PREFIX=keys/keys_send_

# Log file prefixes
# 日志文件前缀
VALID_KEY_DETAIL_PREFIX=logs/keys_valid_detail_
RATE_LIMITED_KEY_DETAIL_PREFIX=logs/key_429_detail_
KEYS_SEND_DETAIL_PREFIX=logs/keys_send_detail_

# Scanned files tracking
# 已扫描文件跟踪
SCANNED_SHAS_FILE=scanned_shas.txt

# ============================================
# EXTERNAL SYNC - GEMINI BALANCER / 外部同步 - GEMINI BALANCER
# ============================================

# Enable Gemini Balancer synchronization
# 启用 Gemini Balancer 同步
GEMINI_BALANCER_SYNC_ENABLED=false

# Gemini Balancer service URL
# Gemini Balancer 服务地址
GEMINI_BALANCER_URL=

# Gemini Balancer authentication token
# Gemini Balancer 认证令牌
GEMINI_BALANCER_AUTH=

# ============================================
# EXTERNAL SYNC - GPT LOAD / 外部同步 - GPT LOAD
# ============================================

# Enable GPT Load Balancer synchronization
# 启用 GPT Load Balancer 同步
GPT_LOAD_SYNC_ENABLED=false

# GPT Load service URL
# GPT Load 服务地址
GPT_LOAD_URL=

# GPT Load authentication token
# GPT Load 认证令牌
GPT_LOAD_AUTH=

# GPT Load group names (comma-separated)
# GPT Load 组名（逗号分隔）
GPT_LOAD_GROUP_NAME=group1,group2,group3

# ============================================
# LOGGING CONFIGURATION / 日志配置
# ============================================

# Log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
# 日志级别
LOG_LEVEL=INFO

# Enable colored console output
# 启用彩色控制台输出
COLORED_LOGS=true

# Log file rotation size in MB
# 日志文件轮转大小（MB）
LOG_ROTATION_SIZE=10

# Number of log files to keep
# 保留的日志文件数量
LOG_BACKUP_COUNT=5

# ============================================
# CREDENTIAL MANAGER CONFIGURATION / 凭证管理系统配置
# ============================================
# (For Super Scanner Version / 超级版扫描器专用)

# Enable encryption for credential storage
# 启用凭证存储加密
CREDENTIAL_ENCRYPTION_ENABLED=true

# Encryption key for credential storage (change this!)
# 凭证存储加密密钥（请更改！）
ENCRYPTION_KEY=your-secret-encryption-key-change-this

# Load balancing strategy for credentials
# 凭证负载均衡策略
# Options: quota_aware, adaptive, weighted_round_robin, least_connections,
#          response_time, random, round_robin, priority
CREDENTIAL_BALANCING_STRATEGY=quota_aware

# Minimum pool size for credentials
# 凭证池最小大小
CREDENTIAL_MIN_POOL_SIZE=10

# Maximum pool size for credentials
# 凭证池最大大小
CREDENTIAL_MAX_POOL_SIZE=100

# Health check interval in seconds
# 健康检查间隔（秒）
CREDENTIAL_HEALTH_CHECK_INTERVAL=60

# Credential discovery interval in seconds
# 凭证发现间隔（秒）
CREDENTIAL_DISCOVERY_INTERVAL=300

# ============================================
# TOKEN HARVESTING CONFIGURATION / TOKEN收集配置
# ============================================
# ⚠️ WARNING: Use with caution and ensure compliance with laws and terms of service
# ⚠️ 警告：谨慎使用，确保符合法律法规和服务条款

# Enable automatic token harvesting (default: false)
# 启用自动Token收集（默认：false）
CREDENTIAL_AUTO_HARVEST=false

# Production environment protection (requires explicit enable)
# 生产环境保护（需要显式启用）
CREDENTIAL_HARVEST_PRODUCTION=false

# Risk threshold for harvested tokens (0-5)
# 收集Token的风险阈值（0-5）
# 0=TRUSTED, 1=LOW, 2=MEDIUM, 3=HIGH, 4=CRITICAL, 5=BLACKLISTED
CREDENTIAL_HARVEST_RISK_THRESHOLD=2

# Validate discovered tokens
# 验证发现的tokens
CREDENTIAL_VALIDATE_DISCOVERED=true

# Maximum number of discovered tokens to keep
# 保留的最大发现tokens数量
CREDENTIAL_MAX_DISCOVERED=10

# Use sandbox validation for discovered tokens
# 对发现的tokens使用沙箱验证
CREDENTIAL_SANDBOX_VALIDATION=true

# Enable honeypot detection
# 启用蜜罐检测
CREDENTIAL_HONEYPOT_DETECTION=true

# ============================================
# MONITORING DASHBOARD / 监控仪表板配置
# ============================================
# (For Super Scanner Version / 超级版扫描器专用)

# Enable real-time monitoring dashboard
# 启用实时监控仪表板
MONITORING_ENABLED=false

# Monitoring dashboard port
# 监控仪表板端口
MONITORING_PORT=8080

# Dashboard refresh interval in seconds
# 仪表板刷新间隔（秒）
DASHBOARD_REFRESH_INTERVAL=5

# ============================================
# SCANNER VERSION SELECTION / 扫描器版本选择
# ============================================

# Default scanner version to use
# 默认使用的扫描器版本
# Options: normal, improved, super
DEFAULT_SCANNER_VERSION=improved

# ============================================
# API SCANNING CONFIGURATION / API扫描配置
# ============================================

# Target API types to scan (comma-separated)
# 要扫描的API类型（逗号分隔）
# Options: gemini, openai, anthropic, cohere, huggingface, aws, azure
# Default: gemini
TARGET_API_TYPES=gemini

# Enable multi-API scanning
# 启用多API扫描
MULTI_API_SCAN_ENABLED=false

# API-specific validation settings
# API特定的验证设置

# Gemini API validation
VALIDATE_GEMINI=true
GEMINI_TEST_MODEL=gemini-1.5-flash

# OpenAI API validation (if enabled)
VALIDATE_OPENAI=false
OPENAI_TEST_ENDPOINT=/v1/models

# Anthropic API validation (if enabled)
VALIDATE_ANTHROPIC=false
ANTHROPIC_TEST_MODEL=claude-3-sonnet

# Custom API patterns file
# 自定义API模式文件
API_PATTERNS_FILE=config/api_patterns.json

# ============================================
# ADVANCED CONFIGURATION / 高级配置
# ============================================

# Enable debug mode (verbose output)
# 启用调试模式（详细输出）
DEBUG_MODE=false

# Skip SSL verification (not recommended for production)
# 跳过 SSL 验证（生产环境不推荐）
SKIP_SSL_VERIFY=false

# Custom user agent for requests
# 自定义请求的用户代理
USER_AGENT=Hajimi-King/0.0.2-beta

# Rate limit delay between requests (seconds)
# 请求之间的速率限制延迟（秒）
RATE_LIMIT_DELAY=1

# ============================================
# DOCKER SPECIFIC / DOCKER 特定配置
# ============================================

# Container timezone
# 容器时区
TZ=Asia/Shanghai

# Run as user ID (for permission management)
# 运行用户 ID（用于权限管理）
PUID=1000
PGID=1000

# ============================================
# MONITORING & METRICS / 监控和指标
# ============================================

# Enable metrics collection
# 启用指标收集
ENABLE_METRICS=false

# Metrics server port
# 指标服务器端口
METRICS_PORT=9090

# Health check endpoint
# 健康检查端点
HEALTH_CHECK_ENDPOINT=/health

# ============================================
# ENVIRONMENT SETTINGS / 环境设置
# ============================================

# Current environment (development, staging, production)
# 当前环境
ENVIRONMENT=development

# Enable security mode (restricts dangerous operations)
# 启用安全模式（限制危险操作）
SECURITY_MODE=true

# IP whitelist (comma-separated, empty means no restriction)
# IP白名单（逗号分隔，空表示不限制）
IP_WHITELIST=

# ============================================
# PERFORMANCE OPTIMIZATION / 性能优化
# ============================================

# Concurrent requests limit
# 并发请求限制
CONCURRENT_REQUESTS=5

# Request delay in milliseconds
# 请求延迟（毫秒）
REQUEST_DELAY=1000

# Cache TTL in seconds
# 缓存过期时间（秒）
CACHE_TTL=3600

# Enable caching
# 启用缓存
CACHE_ENABLED=true

# ============================================
# NOTES / 注意事项
# ============================================
# 1. Never commit .env file to version control
#    永远不要将 .env 文件提交到版本控制
#
# 2. Keep your GitHub tokens secure
#    保护好你的 GitHub 令牌
#
# 3. Use strong authentication for external services
#    为外部服务使用强认证
#
# 4. Regularly rotate your API keys
#    定期轮换你的 API 密钥
#
# 5. Monitor rate limits to avoid bans
#    监控速率限制以避免被封禁
#
# 6. For Super Scanner: Configure credential manager settings
#    超级版扫描器：配置凭证管理器设置
#
# 7. Token harvesting is disabled by default for security
#    Token收集功能默认禁用以确保安全
#
# 8. Always test in development before production deployment
#    在生产部署前始终在开发环境测试
# ============================================

# ============================================
# SCANNER VERSIONS / 扫描器版本说明
# ============================================
# Normal Scanner (api_key_scanner.py):
#   - Basic functionality
#   - Quick testing
#   - No persistence
#
# Improved Scanner (api_key_scanner_improved.py):
#   - Data persistence
#   - Graceful shutdown
#   - Production ready
#
# Super Scanner (api_key_scanner_super.py):
#   - Advanced credential management
#   - Load balancing strategies
#   - Self-healing mechanisms
#   - Optional token harvesting
#   - Real-time monitoring
#   - Enterprise features
# ============================================
